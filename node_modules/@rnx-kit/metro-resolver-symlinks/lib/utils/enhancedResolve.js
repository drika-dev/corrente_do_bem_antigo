"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyEnhancedResolver = void 0;
const module_1 = require("@rnx-kit/tools-node/module");
const platform_1 = require("@rnx-kit/tools-react-native/platform");
const path = __importStar(require("path"));
const getEnhancedResolver = (() => {
    const resolvers = {};
    return (context, platform = "common") => {
        if (!resolvers[platform]) {
            const { 
            // @ts-expect-error Property 'mainFields' does not exist on type 'ResolutionContext'
            mainFields, sourceExts, 
            // @ts-expect-error Property 'unstable_conditionNames' does not exist on type 'ResolutionContext'
            unstable_conditionNames, 
            // @ts-expect-error Property 'unstable_enablePackageExports' does not exist on type 'ResolutionContext'
            unstable_enablePackageExports, } = context;
            const extensions = sourceExts.map((ext) => `.${ext}`);
            resolvers[platform] = require("enhanced-resolve").create.sync({
                aliasFields: ["browser"],
                // Add `require` to handle packages that are missing `default`
                // conditional. See
                // https://github.com/webpack/enhanced-resolve/issues/313
                conditionNames: unstable_enablePackageExports
                    ? unstable_conditionNames
                    : ["require", "node"],
                // Unless `unstable_enablePackageExports` is enabled, disable exports
                // map as it currently takes precedence over the `react-native` field.
                ...(unstable_enablePackageExports ? undefined : { exportsFields: [] }),
                extensions: platform === "common"
                    ? extensions
                    : (0, platform_1.expandPlatformExtensions)(platform, extensions),
                mainFields,
            });
        }
        return resolvers[platform];
    };
})();
function getFromDir(context, moduleName) {
    const { extraNodeModules, originModulePath } = context;
    if (extraNodeModules) {
        const ref = (0, module_1.parseModuleRef)(moduleName);
        if ((0, module_1.isPackageModuleRef)(ref)) {
            const pkgName = ref.scope ? `${ref.scope}/${ref.name}` : ref.name;
            const dir = extraNodeModules[pkgName];
            if (dir) {
                return dir;
            }
        }
    }
    return originModulePath ? path.dirname(originModulePath) : process.cwd();
}
function applyEnhancedResolver(_resolve, context, moduleName, platform) {
    if (!platform) {
        return { type: "empty" };
    }
    const enhancedResolve = getEnhancedResolver(context, platform);
    const filePath = enhancedResolve(getFromDir(context, moduleName), moduleName);
    if (filePath === false) {
        return { type: "empty" };
    }
    return {
        type: "sourceFile",
        filePath,
    };
}
exports.applyEnhancedResolver = applyEnhancedResolver;
//# sourceMappingURL=enhancedResolve.js.map