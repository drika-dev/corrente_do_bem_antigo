"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMetroVersion = exports.findMetroPath = void 0;
const package_1 = require("@rnx-kit/tools-node/package");
function resolveDependency(name, startDir) {
    return (0, package_1.findPackageDependencyDir)(name, {
        startDir,
        resolveSymlinks: true,
    });
}
/**
 * Finds the installation path of Metro.
 * @param projectRoot The root of the project; defaults to the current working directory
 * @returns The path to the Metro installation; `undefined` if Metro could not be found
 */
function findMetroPath(projectRoot = process.cwd()) {
    const rnPath = resolveDependency("react-native", projectRoot);
    if (!rnPath) {
        return undefined;
    }
    const cliPath = resolveDependency("@react-native-community/cli", rnPath);
    if (!cliPath) {
        return undefined;
    }
    const cliMetroPath = resolveDependency("@react-native-community/cli-plugin-metro", cliPath);
    return resolveDependency("metro", cliMetroPath || cliPath);
}
exports.findMetroPath = findMetroPath;
/**
 * Returns Metro version number.
 * @param projectRoot The root of the project; defaults to the current working directory
 * @returns Metro version number; `undefined` if Metro could not be found
 */
function getMetroVersion(projectRoot = process.cwd()) {
    const metroPath = findMetroPath(projectRoot);
    if (!metroPath) {
        return undefined;
    }
    const { version } = (0, package_1.readPackage)(metroPath);
    return version;
}
exports.getMetroVersion = getMetroVersion;
//# sourceMappingURL=metro.js.map